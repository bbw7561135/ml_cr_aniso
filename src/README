####  Генерация карт событий от источкика

1) сэмплинг пар E,Z
python psample.py --distance 3.5 --Nini 100000 --Emin 56
условие: в папке ./spectra_1s/ должны находиться файлы XX.X.gz, где XX.X - расстояние до источника, напр 3.5.gz
результат выполнения sample_D3.5_Emin56_100000nuclei.txt
1a) то же со сдвигом состава A -> A/2
   python psample.py --distance 3.5 --Nini 100000 --Emin 56 --shiftA 0.5
1b) то же с моно-составом A=16
   python psample.py --distance 3.5 --Nini 100000 --Emin 56 --shiftA -16

2) сортировка вывода
  cat sample_D3.5_Emin56_100000nuclei.txt | awk 'NR>6' | sort | uniq -c | awk '{print $2 " " $3 " " $1}' > sample_D3.5_Emin56_100000nuclei_sorted.txt

3) генерация карт направлений прихода
  python src_sample.py --source_id CenA --Nside 32 --Nini 100000 --GMF jf --Emin 56
  условие 1: сгенерирован файл data/sample_D3.5_Emin56_100000nuclei_sorted.txt  (см. шаг 2, здесь 3.5 - расстояние до CenA)
  список поддерживаемых источников с расстояниями см. словарь source_data в src_sample.py
  условие 2: в папке data/jf/32 лежат файлы helium_141EeV.txt.xz и т.п. (результат бэктрекинга ядер), здесь jf - модель магнитного поля
  результат выполнения: файл data/jf/sources/src_sample_CenA_D3.5_Emin56_N100000_R1_Nside32.txt.xz
##########################################################
### тренировка нейронной сети и работа с тестовой статистикой на основе HEALPix-карт направлений прихода

1) тренировка сети и оценка минимальной доли детектируемых событий
python train_healpix.py --source_id CenA --Neecr 500 --log_sample --n_samples 100000 --mf jf --n_early_stop 2 --Nside 32
обучение одной сетки на примерах сразу от нескольких источников:
python train_healpix.py --source_id "CenA,M82,NGC253,M87,FornaxA" ...
сравнение результатов применения сетки к картам полученным для другого магнитного поля:
python train_healpix.py --compare_mf pt ...
условие: в папках data/jf/sources/ , data/pt/sources/ и т.п. должны находиться файлы с картами для соответствующих случаев
результат выполнения:
    CenA_N500_Bjf_Ns32-1_F32_v0.h5 - обученная нейронная сеть
    CenA_N500_Bjf_Ns32-1_F32_v0.h5.score - список основных показателей классификатора и тестовой статистики,
    в том числе минимальная доля детектируемых событий для модели магнитного поля, на котором сеть тренировалась
    и альтернативной модели
    CenA_N500_Bjf_Ns32-1_F32_v0_det_frac.txt - эволюция минимальной детектируемой доли с эпохами обучения нейронной сети

2) применение существующей нейросетевой модели к произвольному распределению направлений прилета, задаваемому картой
в формате src_sample_
    python calc_min_fractions.py data/jf/sources/src_sample_CenA_D3.5_Emin56_N10000_R1_Nside32_shift2.0.txt.xz --log_sample --Neecr 300 --n_samples 10000 --Nside 32 --model CenA_FornaxA_M82_M87_NGC253_N300_Bjf_Ns32-1_F32_v0.h5
результат:
    программа выводит в консоль минимальную долю детектируемых событий вместе с alpha (вероятностью ошибки 1 типа)

Для того, чтобы иметь возможность загружать ранее обученные модели, использующие библиотеку NNhealpix необходимо применить следующий патч:
    cd (NNhealpix dir)/nnhealpix/layers
    patch < (uhecr_aniso dir)/src/nnhealpix_layers.patch

##########################################################
### тестовая статистика на основе углового спектра

1) Генерируем npz-файлы с примерами
смешенным:
python3 mixed_spectrum_gen.py --Neecr 50 --Nmixed_samples 100000 --source_id CenA --log_sample --f_src_min 1e-2
( результат выполнения, файл aps_CenA_D3.5_Bjf_Emin56_Neecr50_Nsample100000_R1_Nside512_logF_src_f_min0.01_0.npz)
и изотропным:
python3 mixed_spectrum_gen.py --Neecr 50 --Nmixed_samples 100000 --source_id CenA --f_src 0
( результат выполнения, файл iso_Neecr50_Nsample100000_Nside512_0.npz )

2) указываем в строке 5 train_spec.py файл, с примерами, по которым будет
вычислена и зафиксирована нормировка. Это может быть один из
сгенерированных на первом шаге файлов, например
norm_file = 'aps_CenA_D3.5_Bjf_Emin56_Neecr50_Nsample100000_R1_Nside512_logF_src_f_min0.01_0.npz'

3) тренируем сетку (в качестве параметров командной строки указываем все файлы, сгенерированные на шаге 1)
python3 train_spec.py aps_CenA_D3.5_Bjf_Emin56_Neecr50_Nsample100000_R1_Nside512_logF_src_f_min0.01_0.npz iso_Neecr50_Nsample100000_Nside512_0.npz

это самый долгий шаг. Его можно ускорить, если уменьшить число эпох для ранней остановки (параметр командной строки --n_early_stop XX, по умолчанию 30)
В конце выводится сообщение

Epoch XXX: early stopping
Training took XXX sec
Model saved in spectrum_L33_th0.01_v0.h5
loss XXX
acc XXX

В файле  spectrum_L33_th0.01_v0.h5 сохранена сетка

4) генерируем тестовые примеры (см. шаг 1)
( результат выполнения, файлы
aps_CenA_D3.5_Bjf_Emin56_Neecr50_Nsample100000_R1_Nside512_logF_src_f_min0.01_1.npz, iso_Neecr50_Nsample100000_Nside512_1.npz
)

5) вычисляем тестовую статистику на тестовых примерах
python3 nn_f_spec.py aps_CenA_D3.5_Bjf_Emin56_Neecr50_Nsample100000_R1_Nside512_logF_src_f_min0.01_1.npz iso_Neecr50_Nsample100000_Nside512_1.npz --model spectrum_L33_th0.01_v0.h5

результат выполнения - файлы
spectrum_L33_th0.01_v0__aps_CenA_D3.5_Bjf_Emin56_Neecr50_Nsample100000_R1_Nside512_logF_src_f_min0.01_1.npz
spectrum_L33_th0.01_v0__iso_Neecr50_Nsample100000_Nside512_1.npz

6) вычисляем детектируемые доли событий
python3 calc_fractions.py --mixed
spectrum_L33_th0.01_v0__aps_CenA_D3.5_Bjf_Emin56_Neecr50_Nsample100000_R1_Nside512_logF_src_f_min0.01_1.npz --iso spectrum_L33_th0.01_v0__iso_Neecr50_Nsample100000_Nside512_1.npz

результат выполнения:
detectable_fraction, alpha
(соответствуют числам из таблиц 1 и 2 нашей первой статьи)

Вместо нейронной сети можно использовать любую тестовую статистику,
для этого вместо шага 5) выполнить команду
python3 f_spec.py aps_CenA_D3.5_Bjf_Emin56_Neecr50_Nsample100000_R1_Nside512_logF_src_f_min0.01_1.npz iso_Neecr50_Nsample100000_Nside512_1.npz
предварительно определив тестовую статистику в файле  f_spec.py строка 42
в функции
def f(spec):
    ......

